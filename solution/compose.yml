version: '3.9'

services:
  backend:
    build: ./backend
    container_name: backend_service
    hostname: backend-service
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://backend-db:5432/backend_db
      SPRING_DATASOURCE_USERNAME: backend_user
      SPRING_DATASOURCE_PASSWORD: backend_password
      REDIS_HOST: redis
      REDIS_PORT: 6379
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SERVICE_URL: http://statistic-service:8081
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: minioadmin
      S3_SECRET_KEY: minioadmin
      S3_BUCKET: backend
      GIGA_CHAT_URL: http://gigachat:5000
    depends_on:
      - backend-db
      - redis
      - kafka
      - minio
    networks:
      - app-network

  statistic:
    build: ./statistic
    container_name: statistic_service
    hostname: statistic-service
    ports:
      - "8081:8081"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://statistic-db:5432/statistic_db
      SPRING_DATASOURCE_USERNAME: statistic_user
      SPRING_DATASOURCE_PASSWORD: statistic_password
      REDIS_HOST: redis
      REDIS_PORT: 6379
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      - statistic-db
      - redis
      - kafka
    networks:
      - app-network

  backend-db:
    image: postgres:16
    container_name: backend_db
    environment:
      POSTGRES_DB: backend_db
      POSTGRES_USER: backend_user
      POSTGRES_PASSWORD: backend_password
    ports:
      - "5433:5432"
    volumes:
      - backend_db_data:/var/lib/postgresql/data
    networks:
      - app-network

  statistic-db:
    image: postgres:16
    container_name: statistic_db
    environment:
      POSTGRES_DB: statistic_db
      POSTGRES_USER: statistic_user
      POSTGRES_PASSWORD: statistic_password
    ports:
      - "5434:5432"
    volumes:
      - statistic_db_data:/var/lib/postgresql/data
    networks:
      - app-network

  redis:
    hostname: redis
    image: redis:7
    container_name: redis_cache
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:7.5.1
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - app-network

  minio:
    image: minio/minio
    container_name: minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
    command: server /data
    volumes:
      - minio_data:/data
    networks:
      - app-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - app-network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - app-network

  bot:
    build: ./bot
    container_name: telegram_bot
    environment:
      - TELEGRAM_BOT_TOKEN=7943694592:AAE1nGTCMqFjTYIsdPg-LflfBOPOzpqJeqA
      - BACKEND_URL=http://backend-service:8080
    depends_on:
      - backend
    restart: always
    networks:
      - app-network

  adservice:
    build: ./gigachat
    container_name: gigachat
    hostname: gigachat
    ports:
      - "5000:5000"
    environment:
      GIGACHAT_CREDENTIALS: ODdlOWM1YTgtNmQ4OC00MTc3LTg2NTItZjk5ZWY2MWFiYzUwOjlhODY1NjJhLTk2MWYtNGJmMi1hYTdhLWUyMTgxYzcyZGRjNw==
    networks:
        - app-network

volumes:
  backend_db_data:
  statistic_db_data:
  redis_data:
  minio_data:
  grafana_data:

networks:
  app-network: