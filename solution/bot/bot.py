import asyncio
from io import BytesIO
import matplotlib.pyplot as plt
from aiogram.types import InputFile
import json
import logging
import os
import uuid
import aiohttp
import aiosqlite
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

API_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "7943694592:AAE1nGTCMqFjTYIsdPg-LflfBOPOzpqJeqA")
BACKEND_URL = os.getenv("BACKEND_URL", "http://localhost:8080")
DATABASE = "clients.db"

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

user_roles = {}
selected_clients = {}
selected_advertisers = {}
pending_ad_text_generation = {}

async def init_db():
    async with aiosqlite.connect(DATABASE) as db:
        await db.execute(
            """
            CREATE TABLE IF NOT EXISTS clients (
                client_id TEXT PRIMARY KEY,
                login TEXT NOT NULL,
                age INTEGER NOT NULL,
                location TEXT NOT NULL,
                gender TEXT NOT NULL,
                user_id INTEGER NOT NULL
            );
            """
        )
        await db.commit()

@dp.message(Command("start"))
async def start_command(message: Message):
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ö–ª–∏–µ–Ω—Ç", callback_data="role:client")],
        [InlineKeyboardButton(text="–†–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—å", callback_data="role:advertiser")]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:", reply_markup=keyboard)


@dp.callback_query(lambda c: c.data.startswith("role:"))
async def set_role(callback: types.CallbackQuery):
    role = callback.data.split(":")[1]
    user_id = callback.from_user.id
    user_roles[user_id] = role

    # –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    if role == "client":
        buttons = [
            "üÜï –°–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞",
            "üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤",
            "‚úÖ –í—ã–±—Ä–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞",
            "üéØ –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–ª–∞–º—É"
        ]
    else:
        buttons = [
            "üè¢ –°–æ–∑–¥–∞—Ç—å —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è",
            "üì¢ –°–æ–∑–¥–∞—Ç—å —Ä–µ–∫–ª–∞–º—É",
            "‚úçÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º—ã",
            "üõ† –ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∫–ª–∞–º—É",
            "üìä –ì—Ä–∞—Ñ–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
        ]

    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=b)] for b in buttons],
        resize_keyboard=True
    )

    await callback.message.answer(f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å: `{role}`.", reply_markup=keyboard)


# -------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
# -------------------------
@dp.message(lambda msg: msg.text == "üÜï –°–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞" and user_roles.get(msg.from_user.id) == "client")
async def create_client(message: Message):
    user_id = message.from_user.id
    async with aiosqlite.connect(DATABASE) as db:
        cursor = await db.execute("SELECT COUNT(*) FROM clients WHERE user_id = ?", (user_id,))
        client_count = (await cursor.fetchone())[0]
    if client_count >= 10:
        await message.answer("‚ùå –í—ã —É–∂–µ —Å–æ–∑–¥–∞–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ (10).")
        return
    await message.answer(
        "üîπ –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "üîπ `name:TestUser` - –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞\n"
        "üîπ `age:25` - –≤–æ–∑—Ä–∞—Å—Ç –∫–ª–∏–µ–Ω—Ç–∞\n"
        "üîπ `city:–ú–æ—Å–∫–≤–∞` - –≥–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è\n"
        "üîπ `gender:male` - –ø–æ–ª (MALE, FEMALE)\n\n"
        "üìå –ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞:\n"
        "```\n"
        "name:–ò–≤–∞–Ω\n"
        "age:30\n"
        "city:–ú–æ—Å–∫–≤–∞\n"
        "gender:MALE\n"
        "```"
    )

@dp.message(lambda msg: "name:" in msg.text and "age:" in msg.text and user_roles.get(msg.from_user.id) == "client")
async def save_client(message: Message):
    lines = message.text.split("\n")
    data_map = {}
    for line in lines:
        key_val = line.split(":", 1)
        if len(key_val) == 2:
            data_map[key_val[0].strip().lower()] = key_val[1].strip()  # –ü—Ä–∏–≤–æ–¥–∏–º –∫–ª—é—á–∏ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É

    new_id = str(uuid.uuid4())
    client_data = {
        "client_id": new_id,
        "login": data_map.get("name", "Unknown"),
        "age": int(data_map.get("age", 0)),
        "location": data_map.get("city", "Unknown"),
        "gender": data_map.get("gender", "male"),
        "user_id": message.from_user.id
    }

    async with aiosqlite.connect(DATABASE) as db:
        await db.execute(
            "INSERT INTO clients (client_id, login, age, location, gender, user_id) VALUES (?, ?, ?, ?, ?, ?)",
            (client_data["client_id"], client_data["login"], client_data["age"], client_data["location"], client_data["gender"], client_data["user_id"])
        )
        await db.commit()

    response = await send_client_to_microservice(client_data)
    if response:
        await message.answer(f"‚úÖ –ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —Å ID: `{new_id}`")
    else:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞.")

@dp.message(lambda msg: msg.text == "üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤" and user_roles.get(msg.from_user.id) == "client")
async def list_clients(message: Message):
    user_id = message.from_user.id
    async with aiosqlite.connect(DATABASE) as db:
        cursor = await db.execute("SELECT client_id, login FROM clients WHERE user_id = ? LIMIT 10", (user_id,))
        clients = await cursor.fetchall()
    if not clients:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤.")
        return
    text_list = [f"{i + 1}. {login}" for i, (_, login) in enumerate(clients)]
    await message.answer("–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ (–º–∞–∫—Å. 10):\n" + "\n".join(text_list))

@dp.message(lambda msg: msg.text == "‚úÖ –í—ã–±—Ä–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞" and user_roles.get(msg.from_user.id) == "client")
async def prompt_select_client(message: Message):
    user_id = message.from_user.id
    async with aiosqlite.connect(DATABASE) as db:
        cursor = await db.execute("SELECT client_id, login FROM clients WHERE user_id = ? LIMIT 10", (user_id,))
        clients = await cursor.fetchall()
    if not clients:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞.")
        return
    buttons = [InlineKeyboardButton(text=f"{i + 1}", callback_data=f"select_client:{client_id}") for i, (client_id, _) in enumerate(clients)]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons[i:i + 5] for i in range(0, len(buttons), 5)])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=keyboard)

@dp.callback_query(lambda c: c.data.startswith("select_client:"))
async def set_selected_client(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    client_id = callback.data.split(":")[1]
    async with aiosqlite.connect(DATABASE) as db:
        cursor = await db.execute("SELECT client_id FROM clients WHERE client_id = ? AND user_id = ?", (client_id, user_id))
        client = await cursor.fetchone()
    if client:
        selected_clients[user_id] = client_id
        await callback.message.answer(f"–í—ã–±—Ä–∞–Ω –∫–ª–∏–µ–Ω—Ç: {client_id}")
    else:
        await callback.message.answer("–¢–∞–∫–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

@dp.message(lambda msg: msg.text == "üéØ –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–ª–∞–º—É" and user_roles.get(msg.from_user.id) == "client")
async def get_ads(message: Message):
    user_id = message.from_user.id
    client_id = selected_clients.get(user_id)
    if not client_id:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞.")
        return
    async with aiohttp.ClientSession() as session:
        url = f"{BACKEND_URL}/ads?client_id={client_id}"
        async with session.get(url) as resp:
            if resp.status == 200:
                ad_data = await resp.json()
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                text_response = (
                    f"–ù–∞–∑–≤–∞–Ω–∏–µ: {ad_data.get('ad_title')}\n"
                    f"–¢–µ–∫—Å—Ç: {ad_data.get('ad_text')}\n"
                    f"ID –∫–∞–º–ø–∞–Ω–∏–∏: {ad_data.get('ad_id')}\n"
                    f"ID —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è: {ad_data.get('advertiser_id')}"
                )

                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–ö–ª–∏–∫–Ω—É—Ç—å", callback_data=f"click_ad:{ad_data.get('ad_id')}")]
                ])
                await message.answer(text_response, reply_markup=keyboard)
            elif resp.status == 404:
                await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π —Ä–µ–∫–ª–∞–º—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.")
            else:
                await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–ª–∞–º—ã. –ö–æ–¥: {resp.status}")

@dp.callback_query(lambda c: c.data.startswith("click_ad:"))
async def process_ad_click(callback: types.CallbackQuery):
    ad_id = callback.data.split(":")[1]
    user_id = callback.from_user.id
    client_id = selected_clients.get(user_id)
    if not client_id:
        await callback.message.answer("–ö–ª–∏–µ–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω.")
        return
    click_url = f"{BACKEND_URL}/ads/{ad_id}/click"
    payload = {"client_id": client_id}
    async with aiohttp.ClientSession() as session:
        async with session.post(click_url, json=payload) as resp:
            if resp.status == 204:
                await callback.message.answer("–ö–ª–∏–∫ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω.")
            else:
                error_text = await resp.text()
                await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ: {error_text}")

# -----------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è
# -----------------------------
async def send_advertiser_to_backend(advertiser_data: dict):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è –Ω–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç bulk insert."""
    async with aiohttp.ClientSession() as session:
        url = f"{BACKEND_URL}/advertisers/bulk"
        async with session.post(url, json=[advertiser_data]) as resp:
            if resp.status == 201:
                return await resp.json()
            else:
                return None

async def create_campaign_on_backend(advertiser_id: str, campaign_request: dict):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è."""
    async with aiohttp.ClientSession() as session:
        url = f"{BACKEND_URL}/advertisers/{advertiser_id}/campaigns"
        async with session.post(url, json=campaign_request) as resp:
            if resp.status == 201:
                return await resp.json()
            else:
                return None

async def update_campaign_on_backend(advertiser_id: str, campaign_id: str, campaign_update: dict):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è."""
    async with aiohttp.ClientSession() as session:
        url = f"{BACKEND_URL}/advertisers/{advertiser_id}/campaigns/{campaign_id}"
        async with session.put(url, json=campaign_update) as resp:
            if resp.status == 200:
                return await resp.json()
            else:
                return None

@dp.message(lambda msg: msg.text == "üè¢ –°–æ–∑–¥–∞—Ç—å —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è" and user_roles.get(msg.from_user.id) == "advertiser")
async def create_advertiser(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`–ò–º—è:TestAdvertiser`")

@dp.message(lambda msg: "–ò–º—è:" in msg.text and user_roles.get(msg.from_user.id) == "advertiser")
async def save_advertiser(message: Message):
    # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    data = message.text.split("\n")
    data_map = {}
    for line in data:
        if ":" in line:
            key, value = line.split(":", 1)
            data_map[key.strip()] = value.strip()
    new_id = str(uuid.uuid4())
    advertiser_data = {
        "advertiser_id": new_id,
        "name": data_map.get("–ò–º—è", "Unknown")
    }
    response = await send_advertiser_to_backend(advertiser_data)
    if response:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        selected_advertisers[message.from_user.id] = new_id
        await message.answer(f"–†–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —Å ID: {new_id}")
    else:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è.")

@dp.message(lambda msg: msg.text == "üì¢ –°–æ–∑–¥–∞—Ç—å —Ä–µ–∫–ª–∞–º—É" and user_roles.get(msg.from_user.id) == "advertiser")
async def create_campaign(message: Message):
    user_id = message.from_user.id
    advertiser_id = selected_advertisers.get(user_id)
    if not advertiser_id:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è.")
        return
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "üîπ `impressions_limit:1000` - –ª–∏–º–∏—Ç –ø–æ–∫–∞–∑–æ–≤\n"
        "üîπ `clicks_limit:100` - –ª–∏–º–∏—Ç –∫–ª–∏–∫–æ–≤\n"
        "üîπ `cost_per_impression:0.05` - —Ü–µ–Ω–∞ –∑–∞ 1 –ø–æ–∫–∞–∑ (–≤ —É.–µ.)\n"
        "üîπ `cost_per_click:0.5` - —Ü–µ–Ω–∞ –∑–∞ 1 –∫–ª–∏–∫ (–≤ —É.–µ.)\n"
        "üîπ `ad_title:–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã` - –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n"
        "üîπ `ad_text:–û–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã` - —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n"
        "üîπ `start_date:1672531200` - –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ \n"
        "üîπ `end_date:1672617600` - –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è \n"
        "üîπ `target_age_from:18` - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –∞—É–¥–∏—Ç–æ—Ä–∏–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n"
        "üîπ `target_age_to:35` - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –∞—É–¥–∏—Ç–æ—Ä–∏–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n"
        "üîπ `target_location:–ú–æ—Å–∫–≤–∞` - –≥–µ–æ—Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n"
        "üîπ `target_gender:male` - –ø–æ–ª (MALE, FEMALE, ALL) (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n\n"
        "üìå –ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞:\n"
        "```\n"
        "impressions_limit:1000\n"
        "clicks_limit:100\n"
        "cost_per_impression:0.05\n"
        "cost_per_click:0.5\n"
        "ad_title:–°—É–ø–µ—Ä —Å–∫–∏–¥–∫–∏!\n"
        "ad_text:–¢–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è —Å–∫–∏–¥–∫–∏ –¥–æ 50%!\n"
        "start_date:1714060800\n"
        "end_date:1714233600\n"
        "target_age_from:18\n"
        "target_age_to:35\n"
        "target_location:–ú–æ—Å–∫–≤–∞\n"
        "target_gender:ALL\n"
        "```"
    )

@dp.message(lambda msg: msg.text.startswith("impressions_limit:") and user_roles.get(msg.from_user.id) == "advertiser")
async def save_campaign(message: Message):
    user_id = message.from_user.id
    advertiser_id = selected_advertisers.get(user_id)
    if not advertiser_id:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è.")
        return

    lines = message.text.split("\n")
    data_map = {}
    for line in lines:
        if ":" in line:
            key, value = line.split(":", 1)
            data_map[key.strip()] = value.strip()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥
    targeting = {
        "age_from": int(data_map.get("target_age_from", 0)),
        "age_to": int(data_map.get("target_age_to", 0)),
        "location": data_map.get("target_location", ""),
        "gender": data_map.get("target_gender", "")
    }

    campaign_request = {
        "impressions_limit": int(data_map.get("impressions_limit", 0)),
        "clicks_limit": int(data_map.get("clicks_limit", 0)),
        "cost_per_impression": float(data_map.get("cost_per_impression", 0)),
        "cost_per_click": float(data_map.get("cost_per_click", 0)),
        "ad_title": data_map.get("ad_title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"),
        "ad_text": data_map.get("ad_text", ""),
        "start_date": int(data_map.get("start_date", 0)),
        "end_date": int(data_map.get("end_date", 0)),
        "targeting": targeting
    }

    response = await create_campaign_on_backend(advertiser_id, campaign_request)
    if response:
        await message.answer(f"–ö–∞–º–ø–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞:\nID: {response.get('campaign_id')}")
    else:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞–º–ø–∞–Ω–∏–∏.")

@dp.message(lambda msg: msg.text == "üõ† –ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∫–ª–∞–º—É" and user_roles.get(msg.from_user.id) == "advertiser")
async def modify_campaign(message: Message):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "üîπ `campaign_id: ID_–ö–∞–º–ø–∞–Ω–∏–∏` - ID –∫–∞–º–ø–∞–Ω–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n"
        "üîπ `cost_per_impression: 0.04` - –Ω–æ–≤–∞—è —Ü–µ–Ω–∞ –∑–∞ –ø–æ–∫–∞–∑\n"
        "üîπ `cost_per_click: 0.4` - –Ω–æ–≤–∞—è —Ü–µ–Ω–∞ –∑–∞ –∫–ª–∏–∫\n"
        "üîπ `ad_title: –ù–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫` - –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ–∫–ª–∞–º—ã\n"
        "üîπ `ad_text: –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç` - –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º—ã\n"
        "üîπ `start_date: 1672531200` - –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (UNIX timestamp)\n"
        "üîπ `end_date: 1672617600` - –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (UNIX timestamp)\n"
        "üîπ `target_age_from: 18` - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –∞—É–¥–∏—Ç–æ—Ä–∏–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n"
        "üîπ `target_age_to: 35` - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –∞—É–¥–∏—Ç–æ—Ä–∏–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n"
        "üîπ `target_location: –ú–æ—Å–∫–≤–∞` - –≥–µ–æ—Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n"
        "üîπ `target_gender: ALL` - –ø–æ–ª –∞—É–¥–∏—Ç–æ—Ä–∏–∏ (MALE, FEMALE, ALL) (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n\n"
        "üìå –ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞:\n"
        "```\n"
        "campaign_id: 12345\n"
        "cost_per_impression: 0.05\n"
        "cost_per_click: 0.5\n"
        "ad_title: –ù–æ–≤–∞—è —Ä–µ–∫–ª–∞–º–∞\n"
        "ad_text: –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã\n"
        "start_date: 1714060800\n"
        "end_date: 1714233600\n"
        "target_age_from: 18\n"
        "target_age_to: 35\n"
        "target_location: –ú–æ—Å–∫–≤–∞\n"
        "target_gender: ALL\n"
        "```"
    )

@dp.message(lambda msg: "campaign_id:" in msg.text and user_roles.get(msg.from_user.id) == "advertiser")
async def save_campaign_update(message: Message):
    user_id = message.from_user.id
    advertiser_id = selected_advertisers.get(user_id)
    if not advertiser_id:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è.")
        return

    lines = message.text.split("\n")
    data_map = {}
    for line in lines:
        if ":" in line:
            key, value = line.split(":", 1)
            data_map[key.strip()] = value.strip()

    campaign_id = data_map.get("campaign_id")
    if not campaign_id:
        await message.answer("–ù–µ —É–∫–∞–∑–∞–Ω campaign_id.")
        return

    try:
        campaign_update = {
            "cost_per_impression": float(data_map.get("cost_per_impression", 0)),
            "cost_per_click": float(data_map.get("cost_per_click", 0)),
            "ad_title": data_map.get("ad_title", ""),
            "ad_text": data_map.get("ad_text", ""),
            "start_date": int(data_map.get("start_date", 0)),
            "end_date": int(data_map.get("end_date", 0)),
            "targeting": {
                "age_from": int(data_map.get("target_age_from", 0)),
                "age_to": int(data_map.get("target_age_to", 0)),
                "location": data_map.get("target_location", ""),
                "gender": data_map.get("target_gender", "")
            }
        }
    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return

    response = await update_campaign_on_backend(advertiser_id, campaign_id, campaign_update)
    if response:
        await message.answer(f"–ö–∞–º–ø–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {response}")
    else:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞–º–ø–∞–Ω–∏–∏.")


@dp.message(
    lambda msg: msg.text == "‚úçÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º—ã" and user_roles.get(msg.from_user.id) == "advertiser")
async def prompt_ad_text_generation(message: Message):
    advertiser_id = selected_advertisers.get(message.from_user.id)
    if not advertiser_id:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è.")
        return

    pending_ad_text_generation[message.from_user.id] = True
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π —Ä–µ–∫–ª–∞–º–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏:")


@dp.message(
    lambda msg: msg.from_user.id in pending_ad_text_generation and user_roles.get(msg.from_user.id) == "advertiser")
async def process_ad_text_generation(message: Message):

    pending_ad_text_generation.pop(message.from_user.id, None)

    advertiser_id = selected_advertisers.get(message.from_user.id)
    if not advertiser_id:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è.")
        return

    user_description = message.text

    generate_request = {
        "campaign_description": user_description
    }

    async with aiohttp.ClientSession() as session:
        url = f"{BACKEND_URL}/gigachat/generateAdText"
        async with session.get(url, json=generate_request) as resp:
            if resp.status == 200:
                content_type = resp.headers.get('Content-Type', '')
                if 'application/json' in content_type:
                    response_json = await resp.json()
                    generated_text = response_json.get("ad_text", "–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    await message.answer(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º—ã:\n{generated_text}")
                else:
                    text_response = await resp.text()
                    try:
                        response_json = json.loads(text_response)
                        generated_text = response_json.get("ad_text", "–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        await message.answer(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º—ã:\n{generated_text}")
                    except json.JSONDecodeError:
                        await message.answer(f"–ü–æ–ª—É—á–µ–Ω –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:\n{text_response}")
            else:
                await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Ä–µ–∫–ª–∞–º—ã.")


@dp.message(lambda msg: msg.text == "üìä –ì—Ä–∞—Ñ–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
async def get_statistics(message: Message):
    advertiser_id = selected_advertisers.get(message.from_user.id)
    if not advertiser_id:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è.")
        return

    async with aiohttp.ClientSession() as session:
        url = f"{BACKEND_URL}/stats/advertisers/{advertiser_id}/campaigns"
        async with session.get(url) as resp:
            if resp.status == 200:
                stats = await resp.json()
                response_text = (
                    f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–º–ø–∞–Ω–∏–π:\n"
                    f"–ü–æ–∫–∞–∑–æ–≤: {stats.get('impressions_count', 0)}\n"
                    f"–ö–ª–∏–∫–æ–≤: {stats.get('clicks_count', 0)}\n"
                    f"–ö–æ–Ω–≤–µ—Ä—Å–∏—è: {stats.get('conversion', 0)}\n"
                    f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –Ω–∞ –ø–æ–∫–∞–∑—ã: {stats.get('spent_impressions', 0)}\n"
                    f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –Ω–∞ –∫–ª–∏–∫–∏: {stats.get('spent_clicks', 0)}\n"
                    f"–û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥: {stats.get('spent_total', 0)}\n"
                )
                await message.answer(response_text)
            else:
                await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def send_client_to_microservice(client_data):
    async with aiohttp.ClientSession() as session:
        url = f"{BACKEND_URL}/clients/bulk"
        async with session.post(url, json=[client_data]) as resp:
            if resp.status == 201:
                return await resp.json()
            else:
                return None

async def main():
    logging.basicConfig(level=logging.INFO)
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
